stages:
  - pull
  - build
  - lint
  - push
  - cleanup
  - deploy

before_script:
  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"


pull:
  stage: pull
  allow_failure: true
  tags:
    - test
  script:
    - docker pull "$CI_REGISTRY_IMAGE"

build:
  stage: build
  tags:
    - test
  script:
    - docker build --tag="$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" --cache-from="$CI_REGISTRY_IMAGE":latest .

lint:
  stage: lint
  tags:
    - test
  script:
    - export CI_PIPELINE_ID=$CI_PIPELINE_ID
    - export CI_BUILD_REF_NAME=$CI_COMMIT_REF_NAME
    - docker-compose  -f docker-compose.ci.yml run app flake8 .

push latest:
  stage: push
  tags:
    - test
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":latest
    - docker push "$CI_REGISTRY_IMAGE":latest

push:
  stage: push
  only:
    - master
  tags:
    - test
  script:
    - docker tag "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME" "$CI_REGISTRY_IMAGE":master
    - docker push "$CI_REGISTRY_IMAGE":master

cleanup:
  stage: cleanup
  when: always
  script:
    - docker-compose -p "$CI_PIPELINE_ID" -f docker-compose.ci.yml down --remove-orphans
    - docker rmi -f "$CI_PIPELINE_ID":"$CI_COMMIT_REF_NAME"

deploy:
  stage: deploy
  when: manual
  only:
    - master
  script:
    - docker-compose -f docker-compose.deploy.yml down
    - docker-compose -f docker-compose.deploy.yml up -d


deploy test:
  stage: deploy
  when: manual
  tags:
    - test
  script:
    - docker-compose -f docker-compose.test.yml down
    - docker-compose -f docker-compose.test.yml up -d
